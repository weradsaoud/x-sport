// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Xsport.DB;

#nullable disable

namespace Xsport.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240519171226_update_user_table")]
    partial class update_user_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Xsport.DB.Entities.Academy", b =>
                {
                    b.Property<long>("AcademyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AcademyId"));

                    b.Property<TimeOnly>("CloseAt")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("Lattitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<TimeOnly>("OpenAt")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AcademyId");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyReview", b =>
                {
                    b.Property<long>("AcademyReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AcademyReviewId"));

                    b.Property<long>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Evaluation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReviewDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("AcademyReviewId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("AcademyReviews");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyService", b =>
                {
                    b.Property<long>("AcademyServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AcademyServiceId"));

                    b.Property<long>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("AcademyServiceId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AcademyServices");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyTranslation", b =>
                {
                    b.Property<long>("AcademyTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AcademyTranslationId"));

                    b.Property<long>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AcademyTranslationId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AcademyTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyWorkingDay", b =>
                {
                    b.Property<long>("AcademyWorkingDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AcademyWorkingDayId"));

                    b.Property<long>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("CloseAt")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("OpenAt")
                        .HasColumnType("time without time zone");

                    b.Property<long>("WorkingDayId")
                        .HasColumnType("bigint");

                    b.HasKey("AcademyWorkingDayId");

                    b.HasIndex("WorkingDayId");

                    b.HasIndex("AcademyId", "WorkingDayId")
                        .IsUnique();

                    b.ToTable("AcademyWorkingDays");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AgeCategory", b =>
                {
                    b.Property<long>("AgeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AgeCategoryId"));

                    b.Property<long>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<int>("FromAge")
                        .HasColumnType("integer");

                    b.Property<int>("ToAge")
                        .HasColumnType("integer");

                    b.HasKey("AgeCategoryId");

                    b.HasIndex("AcademyId");

                    b.ToTable("AgeCategories");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AgeCategoryTranslation", b =>
                {
                    b.Property<long>("AgeCategoryTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AgeCategoryTranslationId"));

                    b.Property<long>("AgeCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AgeCategoryTranslationId");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AgeCategoryTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Course", b =>
                {
                    b.Property<long>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CourseId"));

                    b.Property<long>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<long>("AgeCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CourseId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SportId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Xsport.DB.Entities.CourseTranslation", b =>
                {
                    b.Property<long>("CourseTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CourseTranslationId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CourseTranslationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CourseTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.CourseWorkingDay", b =>
                {
                    b.Property<long>("CourseWorkingDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CourseWorkingDayId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("EndAt")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartAt")
                        .HasColumnType("time without time zone");

                    b.Property<long>("WorkingDayId")
                        .HasColumnType("bigint");

                    b.HasKey("CourseWorkingDayId");

                    b.HasIndex("CourseId");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("CourseWorkingDays");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Floor", b =>
                {
                    b.Property<long>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FloorId"));

                    b.Property<int>("NumPlayers")
                        .HasColumnType("integer");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("FloorId");

                    b.HasIndex("SportId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("Xsport.DB.Entities.FloorTranslation", b =>
                {
                    b.Property<long>("FloorTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FloorTranslationId"));

                    b.Property<long>("FloorId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FloorTranslationId");

                    b.HasIndex("FloorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("FloorTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Gender", b =>
                {
                    b.Property<long>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GenderId"));

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Xsport.DB.Entities.GenderTranslation", b =>
                {
                    b.Property<long>("GenderTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GenderTranslationId"));

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GenderTranslationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GenderTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LanguageId"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Level", b =>
                {
                    b.Property<long>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LevelId"));

                    b.Property<int>("MaxPoints")
                        .HasColumnType("integer");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("LevelId");

                    b.HasIndex("SportId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Xsport.DB.Entities.LevelTranslation", b =>
                {
                    b.Property<long>("LevelTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LevelTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LevelTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelId");

                    b.ToTable("LevelTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Match", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MatchId");

                    b.HasIndex("SportId");

                    b.ToTable("Matchs");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Mutimedia", b =>
                {
                    b.Property<long>("MutimediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MutimediaId"));

                    b.Property<long?>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCover")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("boolean");

                    b.Property<long?>("StadiumId")
                        .HasColumnType("bigint");

                    b.HasKey("MutimediaId");

                    b.HasIndex("AcademyId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Mutimedias");
                });

            modelBuilder.Entity("Xsport.DB.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Relative", b =>
                {
                    b.Property<long>("RelativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RelativeId"));

                    b.HasKey("RelativeId");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("Xsport.DB.Entities.RelativeTranslation", b =>
                {
                    b.Property<long>("RelativeTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RelativeTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RelativeId")
                        .HasColumnType("bigint");

                    b.HasKey("RelativeTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RelativeId");

                    b.ToTable("RelativeTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Reservation", b =>
                {
                    b.Property<long>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReservationId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time without time zone");

                    b.Property<long>("StadiumFloorId")
                        .HasColumnType("bigint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time without time zone");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ReservationId");

                    b.HasIndex("StadiumFloorId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Service", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ServiceId"));

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Xsport.DB.Entities.ServiceTranslation", b =>
                {
                    b.Property<long>("ServiceTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ServiceTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("ServiceTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Sport", b =>
                {
                    b.Property<long>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportId"));

                    b.Property<int>("BreakPeriod")
                        .HasColumnType("integer");

                    b.Property<bool>("HasExtraRounds")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumOfBreaks")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfExtraRounds")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfPlayers")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfReferees")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfRounds")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfTeams")
                        .HasColumnType("integer");

                    b.Property<int>("RoundPeriod")
                        .HasColumnType("integer");

                    b.HasKey("SportId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreference", b =>
                {
                    b.Property<long>("SportPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceId"));

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceId");

                    b.HasIndex("SportId");

                    b.ToTable("SportPreferences");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceTranslation", b =>
                {
                    b.Property<long>("SportPreferenceTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("SportPreferenceId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SportPreferenceId");

                    b.ToTable("SportPreferenceTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValue", b =>
                {
                    b.Property<long>("SportPreferenceValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceValueId"));

                    b.Property<bool?>("IsNotAssigned")
                        .HasColumnType("boolean");

                    b.Property<long>("SportPreferenceId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceValueId");

                    b.HasIndex("SportPreferenceId");

                    b.ToTable("SportPreferenceValues");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValueTranslation", b =>
                {
                    b.Property<long>("SportPreferenceValueTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceValueTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SportPreferenceValueId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceValueTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SportPreferenceValueId");

                    b.ToTable("SportPreferenceValueTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportTranslation", b =>
                {
                    b.Property<long>("SportTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("SportTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SportId");

                    b.ToTable("SportTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Stadium", b =>
                {
                    b.Property<long>("StadiumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StadiumId"));

                    b.Property<long?>("AcademyId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("StadiumId");

                    b.HasIndex("AcademyId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumFloor", b =>
                {
                    b.Property<long>("StadiumFloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StadiumFloorId"));

                    b.Property<long>("FloorId")
                        .HasColumnType("bigint");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.HasKey("StadiumFloorId");

                    b.HasIndex("FloorId");

                    b.HasIndex("StadiumId");

                    b.ToTable("StadiumFloors");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumReview", b =>
                {
                    b.Property<long>("StadiumReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StadiumReviewId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Evaluation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReviewDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("StadiumReviewId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("StadiumReviews");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumService", b =>
                {
                    b.Property<long>("StadiumServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StadiumServiceId"));

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.HasKey("StadiumServiceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StadiumId");

                    b.ToTable("StadiumServices");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumTranslation", b =>
                {
                    b.Property<long>("StadiumTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StadiumTranslationId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.HasKey("StadiumTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StadiumId");

                    b.ToTable("StadiumTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumWorkingDay", b =>
                {
                    b.Property<long>("StadiumWorkingDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StadiumWorkingDayId"));

                    b.Property<TimeOnly>("CloseAt")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("OpenAt")
                        .HasColumnType("time without time zone");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkingDayId")
                        .HasColumnType("bigint");

                    b.HasKey("StadiumWorkingDayId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("StadiumWorkingDays");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserCourse", b =>
                {
                    b.Property<long>("UserCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserCourseId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<long?>("RelativeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResidencePlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RelativeId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserMatch", b =>
                {
                    b.Property<long>("UserMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserMatchId"));

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("boolean");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserMatchId");

                    b.HasIndex("MatchId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("UserMatchs");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSport", b =>
                {
                    b.Property<long>("UserSportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserSportId"));

                    b.Property<bool>("IsCurrentState")
                        .HasColumnType("boolean");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserSportId");

                    b.HasIndex("SportId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("UserSports");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSportPreferenceValue", b =>
                {
                    b.Property<long>("UserSportPreferenceValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserSportPreferenceValueId"));

                    b.Property<long>("SportPreferenceValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserSportId")
                        .HasColumnType("bigint");

                    b.HasKey("UserSportPreferenceValueId");

                    b.HasIndex("SportPreferenceValueId");

                    b.HasIndex("UserSportId");

                    b.ToTable("UserSportPreferenceValues");
                });

            modelBuilder.Entity("Xsport.DB.Entities.WorkingDay", b =>
                {
                    b.Property<long>("WorkingDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("WorkingDayId"));

                    b.Property<int>("OrderInWeek")
                        .HasColumnType("integer");

                    b.HasKey("WorkingDayId");

                    b.ToTable("WorkingDays");
                });

            modelBuilder.Entity("Xsport.DB.Entities.WorkingDayTranslation", b =>
                {
                    b.Property<long>("WorkingDayTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("WorkingDayTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("WorkingDayId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkingDayTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("WorkingDayTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportRoleTranslation", b =>
                {
                    b.Property<long>("XsportRoleTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("XsportRoleTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("XsportRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("XsportRoleTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("XsportRoleId");

                    b.ToTable("XsportRoleTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AuthenticationProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<short>("RegistrationStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("XsportName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<long>");

                    b.Property<long?>("SportId")
                        .HasColumnType("bigint");

                    b.HasIndex("SportId");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Xsport.DB.Entities.XsportRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Xsport.DB.Entities.XsportUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Xsport.DB.Entities.XsportUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Xsport.DB.Entities.XsportRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Xsport.DB.Entities.XsportUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyReview", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("AcademyReviews")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "XsportUser")
                        .WithMany("AcademyReviews")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("XsportUser");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyService", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("AcademyServices")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Service", "Service")
                        .WithMany("AcademyServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("AcademyTranslations")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("AcademyTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AcademyWorkingDay", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("AcademyWorkingDays")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.WorkingDay", "WorkingDay")
                        .WithMany("AcademyWorkingDays")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AgeCategory", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("AgeCategorys")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AgeCategoryTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.AgeCategory", "AgeCategory")
                        .WithMany("AgeCategoryTranslations")
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("AgeCategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeCategory");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Course", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("Courses")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.AgeCategory", "AgeCategory")
                        .WithMany("Courses")
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Gender", "Gender")
                        .WithMany("Courses")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("Courses")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");

                    b.Navigation("AgeCategory");

                    b.Navigation("Gender");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.CourseTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Course", "Course")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("CourseTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Xsport.DB.Entities.CourseWorkingDay", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Course", "Course")
                        .WithMany("CourseWorkingDays")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.WorkingDay", "WorkingDay")
                        .WithMany("CourseWorkingDays")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Floor", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("Floors")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.FloorTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Floor", "Floor")
                        .WithMany("FloorTranslations")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("FloorTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Xsport.DB.Entities.GenderTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Gender", "Gender")
                        .WithMany("GenderTranslations")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("GenderTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Level", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("Levels")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.LevelTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("LevelTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Level", "Level")
                        .WithMany("LevelTranslations")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Match", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("Matches")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Mutimedia", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("Mutimedias")
                        .HasForeignKey("AcademyId");

                    b.HasOne("Xsport.DB.Entities.Stadium", "Stadium")
                        .WithMany("Mutimedias")
                        .HasForeignKey("StadiumId");

                    b.Navigation("Academy");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("Xsport.DB.Entities.RefreshToken", b =>
                {
                    b.HasOne("Xsport.DB.Entities.XsportUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xsport.DB.Entities.RelativeTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("RelativeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Relative", "Relative")
                        .WithMany("RelativeTranslations")
                        .HasForeignKey("RelativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Relative");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Reservation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.StadiumFloor", "StadiumFloor")
                        .WithMany("Reservations")
                        .HasForeignKey("StadiumFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StadiumFloor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xsport.DB.Entities.ServiceTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("ServiceTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Service", "Service")
                        .WithMany("ServiceTranslations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreference", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("SportPreferences")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("SportPreferenceTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.SportPreference", "SportPreference")
                        .WithMany("SportPreferenceTranslations")
                        .HasForeignKey("SportPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SportPreference");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValue", b =>
                {
                    b.HasOne("Xsport.DB.Entities.SportPreference", "SportPreference")
                        .WithMany("SportPreferenceValues")
                        .HasForeignKey("SportPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportPreference");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValueTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("SportPreferenceValueTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.SportPreferenceValue", "SportPreferenceValue")
                        .WithMany("SportPreferenceValueTranslations")
                        .HasForeignKey("SportPreferenceValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SportPreferenceValue");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("SportTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("SportTranslations")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Stadium", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Academy", "Academy")
                        .WithMany("Stadiums")
                        .HasForeignKey("AcademyId");

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumFloor", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Floor", "Floor")
                        .WithMany("StadiumFloors")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Stadium", "Stadium")
                        .WithMany("StadiumFloors")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumReview", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Stadium", "Stadium")
                        .WithMany("StadiumReviews")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "XsportUser")
                        .WithMany("StadiumReviews")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");

                    b.Navigation("XsportUser");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumService", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Service", "Service")
                        .WithMany("StadiumServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Stadium", "Stadium")
                        .WithMany("StadiumServices")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("StadiumTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Stadium", "Stadium")
                        .WithMany("StadiumTranslations")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumWorkingDay", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Stadium", "Stadium")
                        .WithMany("StadiumWorkingDays")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.WorkingDay", "WorkingDay")
                        .WithMany("StadiumWorkingDays")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserCourse", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Relative", "Relative")
                        .WithMany("UserCourses")
                        .HasForeignKey("RelativeId");

                    b.HasOne("Xsport.DB.Entities.XsportUser", "XsportUser")
                        .WithMany("UserCourses")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Relative");

                    b.Navigation("XsportUser");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserMatch", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Match", "Match")
                        .WithMany("UserMatchs")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "User")
                        .WithMany("UserMatchs")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSport", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "XsportUser")
                        .WithMany("UserSports")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("XsportUser");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSportPreferenceValue", b =>
                {
                    b.HasOne("Xsport.DB.Entities.SportPreferenceValue", "SportPreferenceValue")
                        .WithMany("UserSportPreferenceValues")
                        .HasForeignKey("SportPreferenceValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.UserSport", "UserSport")
                        .WithMany("UserSportPreferenceValues")
                        .HasForeignKey("UserSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportPreferenceValue");

                    b.Navigation("UserSport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.WorkingDayTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("WorkingDayTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.WorkingDay", "WorkingDay")
                        .WithMany("WorkingDayTranslations")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportRoleTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("XsportRoleTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportRole", "XsportRole")
                        .WithMany("XsportRoleTranslations")
                        .HasForeignKey("XsportRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("XsportRole");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserRole", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("SportId");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Academy", b =>
                {
                    b.Navigation("AcademyReviews");

                    b.Navigation("AcademyServices");

                    b.Navigation("AcademyTranslations");

                    b.Navigation("AcademyWorkingDays");

                    b.Navigation("AgeCategorys");

                    b.Navigation("Courses");

                    b.Navigation("Mutimedias");

                    b.Navigation("Stadiums");
                });

            modelBuilder.Entity("Xsport.DB.Entities.AgeCategory", b =>
                {
                    b.Navigation("AgeCategoryTranslations");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Course", b =>
                {
                    b.Navigation("CourseTranslations");

                    b.Navigation("CourseWorkingDays");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Floor", b =>
                {
                    b.Navigation("FloorTranslations");

                    b.Navigation("StadiumFloors");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Gender", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("GenderTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Language", b =>
                {
                    b.Navigation("AcademyTranslations");

                    b.Navigation("AgeCategoryTranslations");

                    b.Navigation("CourseTranslations");

                    b.Navigation("FloorTranslations");

                    b.Navigation("GenderTranslations");

                    b.Navigation("LevelTranslations");

                    b.Navigation("RelativeTranslations");

                    b.Navigation("ServiceTranslations");

                    b.Navigation("SportPreferenceTranslations");

                    b.Navigation("SportPreferenceValueTranslations");

                    b.Navigation("SportTranslations");

                    b.Navigation("StadiumTranslations");

                    b.Navigation("WorkingDayTranslations");

                    b.Navigation("XsportRoleTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Level", b =>
                {
                    b.Navigation("LevelTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Match", b =>
                {
                    b.Navigation("UserMatchs");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Relative", b =>
                {
                    b.Navigation("RelativeTranslations");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Service", b =>
                {
                    b.Navigation("AcademyServices");

                    b.Navigation("ServiceTranslations");

                    b.Navigation("StadiumServices");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Sport", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Floors");

                    b.Navigation("Levels");

                    b.Navigation("Matches");

                    b.Navigation("SportPreferences");

                    b.Navigation("SportTranslations");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreference", b =>
                {
                    b.Navigation("SportPreferenceTranslations");

                    b.Navigation("SportPreferenceValues");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValue", b =>
                {
                    b.Navigation("SportPreferenceValueTranslations");

                    b.Navigation("UserSportPreferenceValues");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Stadium", b =>
                {
                    b.Navigation("Mutimedias");

                    b.Navigation("StadiumFloors");

                    b.Navigation("StadiumReviews");

                    b.Navigation("StadiumServices");

                    b.Navigation("StadiumTranslations");

                    b.Navigation("StadiumWorkingDays");
                });

            modelBuilder.Entity("Xsport.DB.Entities.StadiumFloor", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSport", b =>
                {
                    b.Navigation("UserSportPreferenceValues");
                });

            modelBuilder.Entity("Xsport.DB.Entities.WorkingDay", b =>
                {
                    b.Navigation("AcademyWorkingDays");

                    b.Navigation("CourseWorkingDays");

                    b.Navigation("StadiumWorkingDays");

                    b.Navigation("WorkingDayTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportRole", b =>
                {
                    b.Navigation("XsportRoleTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportUser", b =>
                {
                    b.Navigation("AcademyReviews");

                    b.Navigation("Reservations");

                    b.Navigation("StadiumReviews");

                    b.Navigation("UserCourses");

                    b.Navigation("UserMatchs");

                    b.Navigation("UserSports");
                });
#pragma warning restore 612, 618
        }
    }
}
