// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Xsport.Db;

#nullable disable

namespace Xsport.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240208210142_first-migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Xsport.DB.Entities.Sport", b =>
                {
                    b.Property<long>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportId"));

                    b.Property<int>("BreakPeriod")
                        .HasColumnType("integer");

                    b.Property<bool>("HasExtraRounds")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumOfBreaks")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfExtraRounds")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfPlayers")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfReferees")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfRounds")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfTeams")
                        .HasColumnType("integer");

                    b.Property<int>("RoundPeriod")
                        .HasColumnType("integer");

                    b.HasKey("SportId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Type", b =>
                {
                    b.Property<long>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserType", b =>
                {
                    b.Property<long>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserTypeId"));

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserTypeId");

                    b.HasIndex("SportId");

                    b.HasIndex("TypeId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportUser", b =>
                {
                    b.Property<long>("XsportUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("XsportUserId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("XsportUserId");

                    b.ToTable("XsportUsers");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserType", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("UserTypes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Type", "Type")
                        .WithMany("UserTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "XsportUser")
                        .WithMany("UserTypes")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("Type");

                    b.Navigation("XsportUser");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Sport", b =>
                {
                    b.Navigation("UserTypes");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Type", b =>
                {
                    b.Navigation("UserTypes");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportUser", b =>
                {
                    b.Navigation("UserTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
