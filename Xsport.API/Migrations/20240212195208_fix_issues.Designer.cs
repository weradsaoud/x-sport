// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Xsport.DB;

#nullable disable

namespace Xsport.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240212195208_fix_issues")]
    partial class fix_issues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Xsport.DB.Entities.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LanguageId"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Match", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MatchId"));

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MatchId");

                    b.HasIndex("SportId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Sport", b =>
                {
                    b.Property<long>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportId"));

                    b.Property<int>("BreakPeriod")
                        .HasColumnType("integer");

                    b.Property<bool>("HasExtraRounds")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumOfBreaks")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfExtraRounds")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfPlayers")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfReferees")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfRounds")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfTeams")
                        .HasColumnType("integer");

                    b.Property<int>("RoundPeriod")
                        .HasColumnType("integer");

                    b.HasKey("SportId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreference", b =>
                {
                    b.Property<long>("SportPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceId"));

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceId");

                    b.HasIndex("SportId");

                    b.ToTable("SportPreferences");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceTranslation", b =>
                {
                    b.Property<long>("SportPreferenceTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("SportPreferenceId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SportPreferenceId");

                    b.ToTable("SportPreferenceTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValue", b =>
                {
                    b.Property<long>("SportPreferenceValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceValueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SportPreferenceId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceValueId");

                    b.HasIndex("SportPreferenceId");

                    b.ToTable("SportPreferenceValues");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValueTranslation", b =>
                {
                    b.Property<long>("SportPreferenceValueTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportPreferenceValueTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("SportPreferenceValueId")
                        .HasColumnType("bigint");

                    b.HasKey("SportPreferenceValueTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SportPreferenceValueId");

                    b.ToTable("SportPreferenceValueTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportTranslation", b =>
                {
                    b.Property<long>("SportTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SportTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("SportTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SportId");

                    b.ToTable("SportTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Type", b =>
                {
                    b.Property<long>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Xsport.DB.Entities.TypeTranslation", b =>
                {
                    b.Property<long>("TypeTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TypeTranslationId"));

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("TypeTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TypeId");

                    b.ToTable("TypeTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserMatch", b =>
                {
                    b.Property<long>("UserMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserMatchId"));

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("boolean");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserMatchId");

                    b.HasIndex("MatchId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("UserMatch");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSport", b =>
                {
                    b.Property<long>("UserSportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserSportId"));

                    b.Property<bool>("IsCurrentState")
                        .HasColumnType("boolean");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserSportId");

                    b.HasIndex("SportId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("UserSport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSportPreference", b =>
                {
                    b.Property<long>("UserSportPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserSportPreferenceId"));

                    b.Property<long>("SportPreferenceId")
                        .HasColumnType("bigint");

                    b.Property<long>("SportPreferenceValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserSportId")
                        .HasColumnType("bigint");

                    b.HasKey("UserSportPreferenceId");

                    b.HasIndex("SportPreferenceId");

                    b.HasIndex("SportPreferenceValueId")
                        .IsUnique();

                    b.HasIndex("UserSportId");

                    b.ToTable("UserSportPreferences");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserType", b =>
                {
                    b.Property<long>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserTypeId"));

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("XsportUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserTypeId");

                    b.HasIndex("SportId");

                    b.HasIndex("TypeId");

                    b.HasIndex("XsportUserId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportUser", b =>
                {
                    b.Property<long>("XsportUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("XsportUserId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("XsportUserId");

                    b.ToTable("XsportUsers");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Match", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("Matches")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreference", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("SportPreferenceTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.SportPreference", "SportPreference")
                        .WithMany("SportPreferenceTranslations")
                        .HasForeignKey("SportPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SportPreference");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValue", b =>
                {
                    b.HasOne("Xsport.DB.Entities.SportPreference", "SportPreference")
                        .WithMany("SportPreferenceValues")
                        .HasForeignKey("SportPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportPreference");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValueTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("SportPreferenceValueTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.SportPreferenceValue", "SportPreferenceValue")
                        .WithMany("SportPreferenceValueTranslations")
                        .HasForeignKey("SportPreferenceValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SportPreferenceValue");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("SportTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("SportTranslations")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.TypeTranslation", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Language", "Language")
                        .WithMany("TypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Type", "Type")
                        .WithMany("TypeTranslations")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserMatch", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Match", "Match")
                        .WithMany("UserMatchs")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "User")
                        .WithMany("UserMatchs")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSport", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "XsportUser")
                        .WithMany("UserSports")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("XsportUser");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSportPreference", b =>
                {
                    b.HasOne("Xsport.DB.Entities.SportPreference", "SportPreference")
                        .WithMany("UserSportPreferences")
                        .HasForeignKey("SportPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.SportPreferenceValue", "SportPreferenceValue")
                        .WithOne("UserSportPreference")
                        .HasForeignKey("Xsport.DB.Entities.UserSportPreference", "SportPreferenceValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.UserSport", "UserSport")
                        .WithMany("UserSportPreferences")
                        .HasForeignKey("UserSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportPreference");

                    b.Navigation("SportPreferenceValue");

                    b.Navigation("UserSport");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserType", b =>
                {
                    b.HasOne("Xsport.DB.Entities.Sport", "Sport")
                        .WithMany("UserTypes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.Type", "Type")
                        .WithMany("UserTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xsport.DB.Entities.XsportUser", "XsportUser")
                        .WithMany("UserTypes")
                        .HasForeignKey("XsportUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");

                    b.Navigation("Type");

                    b.Navigation("XsportUser");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Language", b =>
                {
                    b.Navigation("SportPreferenceTranslations");

                    b.Navigation("SportPreferenceValueTranslations");

                    b.Navigation("SportTranslations");

                    b.Navigation("TypeTranslations");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Match", b =>
                {
                    b.Navigation("UserMatchs");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Sport", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("SportTranslations");

                    b.Navigation("UserTypes");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreference", b =>
                {
                    b.Navigation("SportPreferenceTranslations");

                    b.Navigation("SportPreferenceValues");

                    b.Navigation("UserSportPreferences");
                });

            modelBuilder.Entity("Xsport.DB.Entities.SportPreferenceValue", b =>
                {
                    b.Navigation("SportPreferenceValueTranslations");

                    b.Navigation("UserSportPreference");
                });

            modelBuilder.Entity("Xsport.DB.Entities.Type", b =>
                {
                    b.Navigation("TypeTranslations");

                    b.Navigation("UserTypes");
                });

            modelBuilder.Entity("Xsport.DB.Entities.UserSport", b =>
                {
                    b.Navigation("UserSportPreferences");
                });

            modelBuilder.Entity("Xsport.DB.Entities.XsportUser", b =>
                {
                    b.Navigation("UserMatchs");

                    b.Navigation("UserSports");

                    b.Navigation("UserTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
